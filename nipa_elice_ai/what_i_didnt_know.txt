1. python numpy boolean indexing
    boolean mask : True, False로 구성된 mask array
    ex> x = np.arange(7)   # [0 1 2 3 4 5 6]
    print(x < 3) # [True True True False False False False]
    
    boolean indexing: 배열의 각요소의 선택여부를 boolean mask를 이용하여 지정하는 방식
    #boolean mask의 True요소에 해당하는 index만을 조회
    print(x[x<3]) # [0 1 2]
    print(x[x%2 == 0]) # [0 2 4 6]
    
2. numpy fancy indexing
    배열의 각 요소 선택을 index배열을 전달하여 지정하는 방식
    ex> x = np.arange(7)   # [0 1 2 3 4 5 6]
    print(x[[1,3,5]])  #[1 3 5]
    
    x = np.arange(1,13,1).reshape(3,4)
    
    #[[1 2 3 4]
      [5 6 7 8]
      [9 10 11 12]]
      
    print(x[[0,2]])  #행 indexing이 됨
    
    # [[1 2 3 4]
       [9 10 11 12]]
       
3. pandas 
    -파이썬 라이브러리
    -구조화된 데이터를 효과적으로 처리하고 저장
    -Array계산에 특화된 Numpy를 기반으로 설계
    
    
3.1 pandas Series
    -Numpy의 array가 보강된 형태
    -data와 index를 가지고 있음
            0    1
    (index) 1    2  (data)
            2    3
            3    4
            
    -Series의 type은 pandas.core.series.Series
    -series안의 값의 type은 ndarray
    -데이터 type과 index를 지정할 수 있고 접근도 가능
    data = pd.Series([1,2,3,4],dtype = "float",index = ['a','b','c','d']
    
    -dictionary를 활용하여 Series 생성가능
    country_dict = {'korea' : 5180,'japan' : 12718,'china' : 141500,'usa' : 32676}
    population = pd.Series(country_dict)
    

 3.2 pandas DataFrame
     -여러 개의 Series가 모여서 행과 열을 이룬 데이터
     country = pd.DataFrame({'gdp':gdp(Series type), 'population':population(Seires type)})
     
     -Dictionary를 활용하여 DataFrame 생성가능
     data = {'country':[a,b,c,d], 'gdp':[10,20,30,40],'pop':[100,200,300,400]}
     country = pd.DataFrame(data)
     이렇게 하면 index가 0,1,2,3으로 이루어진 data frame이 만들어진다
     
     여기서 country를 index로 하고 싶으면
     country = country.set_index('country')라고 하면 된다
     
 3.3 데이터 프레임 저장 및 불러오기 가능
     country.to_csv('country.csv')
     country.to_excel('country.xlsx')
     
     country = pd.read_csv('country.csv')
     country = pd.read_excel('country.xlsx')
    
 3.4 데이터 선택(indexing/slicing)
     3.4.1 
     .loc : 명시적인 인텍스를 참조하는 인덱싱/슬라이싱
     country.loc['china']
     =>index가 china인 값들을 보여줘라(해당하는 모든 컬럼값들을 보여줌)
     
     country.loc['japan':'korea', : 'population']
     => ,앞에는 인덱스 뒤에는 컬럼을 의미
     => japan부터 korea 까지, 처음 컬럼부터 population까지 출력해라
     
     3.4.2
     .iloc : 파이썬 스타일의 정수 인덱스 인덱싱/슬라이싱(암묵적으로 순서가 있다고 생각하고 리스트 순서대로 뽑아냄)
     country.iloc[0]
     country.iloc[1:3,:2]
     
     3.4.3
     컬럼명을 활용하여 DataFrame에서 데이터 선택가능
     country['gdp']
     => gdp컬럼명의 값들을 찾는다(Series 형태로 나옴)
     (컬럼이 명시가 안돼서 나옴, 인덱스와 값만 있음)
     country[['gdp']]
     => gdp컬럼명의 값들을 찾는다 (DataFrame형태로 나옴)
     (컬럼이 명시가 됨, 인덱스, 컬럼, 그 컬럼의 값)
     
     3.4.4 
     조건을 안다면 masking 연산이나 query함수를 활용하여 조건에 맞는 DataFrame행 추출가능
     country[country['population'] < 10000] # masking활용
     country.query('population > 10000') #query활용
     
     3.4.5
     Series도 numpy array처럼 연산자 활용가능
     gdp_per_capita = country['gdp'] / country['population']
     country['gdp per capita'] = gdp_per_capita #컬럼 추가
     
     3.4.6
     리스트로 추가 or 딕셔너리로 추가 
     df = pd.DataFrame(colums = ['이름','나이','주소'])  #데이터 프레임 생성
     df.loc[0] = ['길동','25','서울']  # 리스트로 데이터 추가
     df.loc[1] = {'이름':'철수','나이':'25','주소':'인천'} #딕셔너리로 데이터 추가
     df.loc[1,'이름'] = '영희'  #명시적 인덱스를 활용하여 데이터 수정
     
     3.4.7
     NaN값으로 초기화한 새로운 컬럼 추가 (nan = not a number)
     df['전화번호'] = np.nan   #새로운 컬럼 추가 후 초기화
     df.loc[0,'전화번호'] = '0102344556'
     
     3.4.8
     DataFrame에서 컬럼 삭제후 원본 변경
     df.drop('전화번호',axis = 1, inplace = True)   #컬럼삭제
     # axis = 1 : 열 방향 / axis = 0 : 행 방향
     # inplace = True : 원본 변경 / False : 원본변경 x
    

 4 pandas advanced
     4.1
     index 값 기준으로 정렬하기
     df = df.sort_index(axis = 0) # 행 인덱스 기준 정렬(default 오름차순)
     df = df.sort_index(axis = 1, ascending = False) # 열 인덱스 기준 내림차순 정렬
     df.sort_values('col1', ascending =True)  # col1 컬럼 기준 정렬(Default 오름차순)
     df.sort_values('col1', ascending = False)
     df.sort_values(['col2','col1'], ascending = [True,False]) #col2컬럼기준 오름차순 정렬후 col1기준 내림차순 정렬
     
     4.2
     데이터 프레임 분석용 함수
     
     1. count : 열과 행의 데이터 개수를 확인가능하다(Default : NaN값 제외)
     df.count(axis = 0)
     df.count(axis = 1)
     
     2. max, min : 최대, 최솟값 확인 가능 (Default : 열 기준, NaN값 제외)
     df.max(), df.min()
     
     3. sum, mean : 합계 및 평균 계산  (Default : 열 기준, NaN값 제외)
     df.sum(), df.mean()
     
     3.1 axis, skipna인자를 활용하여 합계 및 평균 계산
     df.sum(axis = 1)  #행기준
     df.mean(axis =1, skipna = False)  # 행기준, NaN을 skip하지 않음
     
     3.2 평균을 구할때 NaN이 껴있으면 skipna=False했을때 nan이 뜬다 
     이를 해결하기 위하여 NaN자리에 열 기준 평균값을 미리 넣고 행기준으로 구해주는 방식 등 으로 처리함
     
     4. 간단한 집계를 넘어서서 조건부로 집계하고 싶은 경우
     df.groupby('열이름').sum() 
     df.groupby(['열1','열2']).sum() #계층적으로 함
     
     4.1 aggregate ; groupby를 통해서 집계를 한번에 계산하는 방법
     df.groupby('열이름').aggregate(['min',np.median,max])
     df.groupby('열이름').aggregate({'열1':'min','열2':max})
     
     4.1.2 filter ; groupby를 통해서 그룹 속성을 기준으로 데이터 필터링
     df.groupby('열이름').filter(함수)
     
     4.1.3 apply,lambda ; groupby를 통해서 묶인 데이터에 함수 적용
     df.groupby('열이름').apply(lambda x:x.함수())
     
     4.1.4 get_group ; groupby로 묶인 데이터에서 key값으로 데이터를 가져올 수 있다
     df.groupby("열이름").get_group('이름')
     
 5. dataframe apply
    dataframe의 경우 row or column별로 loop를 돌리면 매우 느리다.
    따라서 apply를 통해서 벡터연산을 실행한다
    
 6. dataframe의 열 접근
    dataframe은 색인으로 컬럼에 접근할 수 있고('[]'), 속성으로(attribute)로 접근할 수 도 있다('.')
 
 7. isin([리스트])
    특정열이 리스트안의 값을 포함하고 있는지 확인할때 사용
    있으면 true 없으면 false를 dataframe 형식으로 리턴
    boolean maksing으로 이용하면 됨
 
