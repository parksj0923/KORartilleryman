Access Flask server using Ngrok
ipynb형태로 만들어 놨음

개발환경과 배포환경은 달라야한다.
 - 서버는 항상 켜져 있어야 하기 때문
 
따라서 개발 환경에서 배포환경으로 만든 코드와 환경을 옮기는 과정이 필요
 모든 환경을 하나로 묶는 것을 패키징(packaging)이라고 한다
 
패키징은 -> 손으로(zip), git , virtual macine(docker)등이 존재



추가 꿀팁
개발환경과 배포환경의 라이브러리나 프로그램들의 버전을 맞추기 위하여 
터미널에 라이브러리들의 버전을 확인
$ pip list
이떄 파이프와 grep 사용하면 원하는 라이브러리의 버전을 쉽게 확인할 수 있다
$ pip list | grep numpy

파이프 ( | ) : 앞의 결과물을 뒤에 넘긴다는 뜻
grep : 뒤에꺼를 찾겠다는 뜻

이런 작업을 자동화 하기 위하여 스크립트(script)를 만듬
1.쉘 스크립트를 만든다 install.sh
    -그냥 터미널에 치는 내용을 스크립트안에 쳐 넣으면됨
        pip3 install numpy == 1.19.5
    -chmod +x install.sh
        install.sh를 실행가능한 파일로 만드는 것
    -./install.sh 를 실행시키면 됨
2.requirements.txt를 만든다
     -requirements안에는 라이브러리 버전들이 적혀있음
         numpy == 1.18.4
         pandas == 1.0.3
     -이 파일을 터미널에서 실행시켜주면 됨
         pip install -r requirements.txt
     -그냥 install.sh안에 pip install -r requirements.txt를 넣어놓으면 따로 터미널에서 칠 필요 없음
     
     
서버를 실행시키는 방법 
- 그냥 서버 파일 파이썬으로 실행시키면 됨
-근데 그냥 실행시키면 터미널이 꺼지면 꺼지는 거기 때문에 백그라운드에서 실행시켜줘야함
    -nohup python3 이름.py &
        -nohup : 로그아웃으로 세션과의 연결이 종료되더라도 프로세스가 데몬형태로 종료되지 않고 계속 실행
        - &(백그라운드) : 해당 프로그램이 백그라운드로 실행
        -hohup과 & : &는 단지 사용자눈에 보이지않는 백그라운드 형태로써 로그아웃으로 세션이 끊어지면 프로그램도 좋료; 하지만 언젠가부터 &가 nohup과 같은 기능이 디폴트값으로 적용됨
        -결론 : 그냥 둘이 같이 쓰면됨
        -종료하는 법 : 프로세스 아이디를 알아내어 종료시키기
            -프로세스 아이디 알아내는 법
                $ ps -ef | grep 이름.sh
            -프로세스 종료
                $ kill -9 프로세스아이디
    ->서버 컴퓨터가 꺼질때까지 꺼지지 않는다.
    ->실행되는 로그는 nohup.out에 계속 써진다.
        -tail -f nohyup.out 을 치면 로그가 계속 터미널에 뜬다.
