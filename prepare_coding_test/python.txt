군대에서 파이썬 코딩대회 준비

1. for _ in range(5)
    print("hi")
  => hi 5번 출력 : _는 의미없는 변수를 할때사용
  
2. iteratble 객체 
    반복가능한 객체 ; for문 사용이 가능한 객체
    대표적으로 iterable한 타입 - list, dict, set, str, bytes, tuple, range
    
   iterator  객체
    값을 하나씩 꺼낼 수 있는 객체
    
    mutable 객체
    변경가능한 객체 
    <=> immutable 
    
3. 파이썬 zip 함수
    두 데이터를 서로 엮어 주는 함수 
    여러개의 iterable한 객체를 쌍으로 만들어줌
    
    
4. 파이썬 한줄로 for문 만들기
    [i for i in v]
    
5.class관련
    -아무것도 안 넣고 class 선언할 때 pass넣으면 에러 안뜸
    -#self의 의미 : self는 인스턴스를 가르킬때 사용된다.self를 사용안하면 메소드가 클래스 자체의 메소드가 되어버린다.즉 self를 쓰면 네임스페이스가 생긴다.
    
6.이차원 행렬 a의원소 하나씩 들어가기
    for i in a:
        for j in i:
            etc
 -한번에 접근할 때는
     for x,y in a:
         print(x,y)
            
7.정원에 꽃피우기 문제
    2차원 좌표에서 동서남북 좌표에 접근할때, dx=(1,0,-1,0), dy=(0,-1,0,1) 이거를 
    for i in range(4):
        x = x[0]+dx[i]
        y = y[1]+dy[i]
    하고, out of range -1이하 와 매트릭스 범위 이상 이것만 처리해주면 됨
    
8. 파이썬은 문자열을 리스트처럼 원소별로 접근할 수있음. 하지만 리스트원소를 바꾸는것 처럼 바꿀 수 는 없음
    타입변환 함수들 : int(), str(), float()등
    
9.파이썬 조건문에 여러개 달때는 &&, ||가 아니라 and or임

10.3개의 숫자가 있을때 두개는 같고 다른 하나를 구하라
    xor을 쓰면 됨  ==> A xor A xor B = B

11.파이썬 map 함수 : 리스트 요소를 지정된 함수로 처리해 주는 함수
    ex> a = [1.2, 2.5, 3.4, 4.7] 정수 리스트로 바꿀때
        a = list(map(int,a))
        a==> [1,2,3,4]
        map에 들어가는 객체들은 리스트 뿐만아니라 반복가능한 개체들 다 들어감
        여기서 list()안해주면 그냥 값들을 리턴함

12.행렬 한 줄에서 j번쨰 원소만 뺴고 이용할떄
     a[i][:j]+a[i][j+1:]
     여기서 리스트 + 리스트 ==> 리스트가 합쳐짐
     
13.뭔가 빡센 문제는 dynamic programming 을 이용한다.
-> 수학으로 따지면 재귀(recursive)

14.빈 리스트,string, tuple 는 false를 가짐
    따라서 빈 리스트를 찾을때는 
    if not list:
        print(false)
        
15.0으로 차있는 리스트에서 1로 바꾸는데 모든값이 1일때까지 루프돌리기
    while 0 in list:
        queue.append(list.index(0))
    
16. 리스트에서 원소가 몇번째 인덱스인지 찾기
    list.index(값)
    
17. set 자료구조
    수학에서 얘기하는 집합과 같다
    순서가 없고, 집합안에서는 unique한 값을 가짐(중복없음)
    mutable객체
    -중괄호를 사용, but key가 없음
    -선언시 s = set()
    - 값 in set 하면 있으면 True 없으면 False
    -add를 통해 원소추가
    -update를 통해 여러데이터를 한번에 넣음
    -remove()로 해당 값 제거, 없으면 에러
    -discard()로 해당 값 제거, 없어도 에러 x

18. enumerate(iterable객체)
    반복문을 돌릴때 몇번쨰 인덱스 인지 같이 출력할때 필요
    인덱스와 값을 튜플로 반환
    for p in enumerate(list)
        print(p)
    =>
    (0,값), (1,값), (2,값),(3,값)
    for i,v in enumerate(list)식으로 사용도 가능
    
19. 람다(lambda) 
    함수를 만들지 않고 메모리를 아끼며 바로사용할떄 유용
    
20. sort()함수
    리스트를 오름차순으로 나열해준다.
    -옵션들
        -list.sort(reverse = True) => 내림차순으로 나열
        -list.sort(key = 값) => 특정값을 기준으로 정렬한다.
            여기서 람다를 잘 사용하면 유용함
            list.sort(key = lamda x:x[2])
21. .join()함수
    리스트 원소 하나하나를 합쳐서 문자열로 만들어준다
    사용법
        -(원소사이 원하는 추가값).join(리스트)
    ex) list = [1,2,3,4,5]
    k = "".join(list) ==> k = '12345'
    
22. .reverse()함수
    리스트의 원소값을 뒤집어서 새로운 리스트로 만듬
    -자매품으로 reversed(list)가 있음 바로 list형태로 나옴
    
23. 문자를 아스키 코드로 변환, 아스키 코드를 문자로 변환
    -ord(문자) = 문자를 아스키 코드로 변환
    -chr(숫자) = 아스키코드를 문자로 변환
    대문자 소문자 섞여있는 문자열에서 정렬할때 사용

24. .split('문자')함수
    문자열을 문자를 기준으로 나눠서 리스트에 담아준다
    '문자'를 안넣으면 기본으로 공백을 기준으로 나눈다
    
25. .capitalize()함수
    문자열의 제일 처음 단어를 대문자로 만들어준다
    그 뒤에는 다 소문자로 만듬
    
26. 딕셔너리
    {}안에 키:값으로 저장한다.
    딕셔너리를 만들때, 키가 중복되면 뒤에 있는 값을 저장하고 중복값을 없앤다.
    dic = dict(키=값,키=값)이런식으로도 선언가능
    zip함수로도 가능 dic = dict(zip([리스트],[리스트]))
    딕셔너리에 키값을 찾을때는 if in 딕셔너리.keys()하면 있으면 True, 없으면 False
    값을 찾을때는   if in 딕셔너리.values()
    해당 키값의 값을 얻을 때는 딕셔너리.get(키이름)
    키:값을 하나씩 추가할때 dic[키] = 값 이렇게 선언만 하면됨
    
27. pop()하는 경우 효율성에서 느려질 수 있다?

28. range(시작,끝)에서 시작이 끝보다 크면 for 문이 돌지 않는다.

29. 조합과 순열 만들기
    순열 : from itertools import permutations
    -중복을 허용하지 않는다.
    -순서에 의미가 있다(같은 값이 뽑히더라도 순서가 다르면 다른 경우의 수로 판단)
    
    조합:from itertools import combinations
    -중복을 허용하지 않는다
-순서에 의미가 없다(같은값이 뽑히면 순서가 달라도 같은경우
    => list(permutations(item,2))
    
30.행렬곱하기
    import numpy as np 를 이용해서 
    a = np.array(arr1)
    b = np.array(arr2)
    c = np.dot(a,b)
    c = c.tolist() 로 한다
    