1.특성 엔지니어링(feature engieneering)
     입력 형태에 맞게 데이터를 변환하는 것
 
2.범주형 데이터(데이터가 범위에 정해져있는것 ; sex = male, female)은 dummy변환을 통해서 수치화 할 수 있다
     pd.get_dummies(DataFrame[[변수명]])
 
3.수치형 데이터(숫자로 나와있는 데이터)의 경우 스케일링(정규화)를 통해 수치화해야한다
    정규화로는 max,min 정규화가 있음 (X-Xmin)/(Xmax-Xmin)
    표준화로는 변수 X를 X'로 표준화함 X' = (X-평균)/분산
    -평균이 0이고 분산이 1인 놈으로 표준화됨
    
4.결측값(missing data)
    일반적인 머신러닝 모델의 입력값은 결측값이 있으면 사용할 수 없음
    따라서 Null, NaN, None등의 값들은 없얘줘야함

5.이상치(Outlier)
    이상치는 범주에서 한참 넘어선 튀는 데이터로 성능을 저해하기 때문에 없애줘야함
    이상치 판단기준 : 
        1.통계지표(카이제곱검정, IQR지표)등을 사용하여 판단
        2.데이터 분포를 보고 직접판단
        3.머신러닝 기법을 이용하여 판단 
6.지도학습 데이터 분리
    label 데이터 : 예측해야할 대상이 되는 데이터
    feature 데이터 : label을 예측하기 위해 입력하는 값
    
7.Loss 함수
    실제값과 예측값 차이의 제곱의 합을 함수로 
    loss가 작을수록 좋은 모델
    
8.회귀 알고리즘 평가 방법
    실제값과 예측값의 차이에 기반한 평가
    1.RSS : 단순오차 
        -전체 데이터에 대한 실제값과 예측하는 값의 오차 제곱의 합
        -값이 작을수록 모델 성능이 좋음
    2.MSE(Mean Squared Error) : 평균 제곱 오차
        -RSS에서 데이터 수만큼 나눈값
        -값이 작을수록 모델 성능이 좋음
        -이상치(Outlier), 데이터들 중 크게 떨어진 값에 민감함
    3.MAE(Mean Absolute Error) : 평균 절대값 오차 
        -실제값과 예측값의 오차의 절대값의 평균
        -변동성이 큰지표와 낮은 지표를 같이 예측시 유용
        -그러나 평균을 그대로 이용하기 때문에 입력값의 크기에 의존
        -값이 작을수록 모델 성능이 좋음
    4.R^2(결정계수)
        -회귀모델의 설명력을 표현하는 지표
        -1에 가까울수록 높은 성능의 모델이라고 할 수 있음
        -R^2 = 1-RSS/TSS
        -TSS는 데이터 평균값과 실제값 차이의 제곱 

9.지니(gini)불순도- 의사결정나무
    -해당구역 안에서 특정 클래스에 속하는 데이터의 비율을 모두 제외한값, 즉 다양성을 계산하는 방법
    -Gini index = 1-(yes확률)^2 -(no확률)^2
    -Gini impurity = n1/N * gini1 + n2/N * gini2

10.분류 평가 지표 
    1.혼동 행렬
         -분류 모델의 성능을 평가하기 위함
         -True Positive:실제 positive값을 positive라고 예측
         True Negative:실제 negative값을 negative라고 예측
         False Positive: 실제 n을 p로 예측(오답)-1형 오류
         False Negative: 실제 p를 n으로 예측(오답)-2형 오류
         -분류 결과를 전체적으로 보고싶을떄 사용
     2.정확도(Accuracy)
         -전체 데이터 중에서 제대로 분류된 데이터의 비율
         -Accuracy = TP+TN/P+N, P:TP+FN, N:TN+FP
         -정답을 얼마나 잘 맞췄는지 알고싶을때
     3.정밀도(Precision)
         -모델이 Positive라고 분류한 데이터 중에서 실제 Positive인 비율
         -Precision = TP/TP+FP
         -FP또는 FN의 중요도가 높을때
     4.재현율(Recall.TPR)
         -실제로 Positive인 데이터 중에서 모델이 Positive로 분류한 데이터의 비율
         -Recall = TP/FP+FN = TP/P
         -FP또는 FN의 중요도가 높을때
 
 11.순전파(Forward propagation)
     -입력값을 바탕으로 출력 값을 계산하는 과정
     -예측값과 실제값 간의 오차값을 구하여 Loss function을 구할 수 있음
     -최적화를 위해서 경사 하강법 사용
 
 12. 경사하강법(Gradient Descent)
     -가중치를 Loss function 값이 작아지게 업데이트 하는 방법
     -가중치는 gradient값을 사용하여 업데이트 수행
     -gradient값은 가중치마다 정해지며, 역전파를 통하여 구할 수 있음

 14. tensorflow
     -딥러닝 프레임워크
     -입력을 tensor객체로 받음
         데이터(numpy, pandas)->tensor형태 데이터 변환->딥러닝
         dataset = tf.data.Dataset.from_tensor_slices((feature.values,label.values))
                                    =>pandas자체로 넣는것이 아닌 배열로 바꿔주고 넣음(.values)

 15. Epoch, Batch
     -Epoch : 한번의 epoch는 전체 데이터 셋에 대해 한번 학습을 완료한 상태
     -Batch : 전체 데이터를 몇 조각의 데이터 셋으로 나눈것(mini-batch라고 표현)
     -batch size: 한 batch의 크기
     -iteration : epoch을 나누어서 실행하는 횟수를 의미
         =>1 epoch을 하는데 몇번의 batch가 필요한가 ; 1 epoch = data size/batch size
         =>1 iteration = 한번의 batch size만큼 학습시키는 것
         
 16. Keras
     -모델 클래스 객체 생성  
     tf.keras.models.Sequential()
     
     -각모델의 각 Layer 구성
     tf.keras.layers.Dense(units, activation)
         units = 레이어 안의 Node의수
         activation = 적용할 activation 함수 설정
         
     -Input Layer의 입력 형태 지정하기
         input_shape / input_dim 인자 설정하기
    ex>
     model = tf.keras.models.Sequential([
         tf.keras.layers.Dense(10,input_dim=2, activation ='sigmoid'), # 2개의 입력변수, 10개의 노드
         tf.keras.layers.Dense(10,activation = 'relu'),
         tf.keras.layers.Dense(1,activation= 'relu')
     ])
     
     -모델에 Layer 추가하기
     [model].add(tf.keras.layers.Dense(units,activation))
     
     -모델 학습 방식을 설정하기 위한 함수
         [model].compile(optimizer, loss)
             optimizer : 모델 학습 최적화 방법
             loss : 손실함수설정
                 회귀 MSE, 분류 Cross Entropy
     -모델을 학습시키기 위한 함수
         [model].fit(x,y)
             x: 학습데이터
             y: 학습데이터의 label
         tensor형태도 가능
         [model].fit(dataset)
     
     -모델을 평가하기 위한 메소드
         [model].evaluate(x,y)
             x:테스트데이터, y:label
             
     -모델로 예측을 수행하기 위한 함수
         [model].predict(x)